---
import Layout from "../../layouts/Layout.astro";
import BlogHeader from "../../components/BlogHeader.astro";
import Footer from "../../components/Footer.astro";
import { getCollection } from "astro:content";
import { slide } from "astro:transitions";
import { BLOG_SITE_DESCRIPTION, BLOG_SITE_TITLE } from "../../config";
import AstroLink from "../../components/AstroLink.astro";

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection("posts", ({ data }) => {
    return data.draft !== true;
  });
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}
// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;
const { title, description, pubDate, updatedDate, heroImage = "" } = entry.data;
const { Content } = await entry.render();
---

<Layout title={title} description={description}>
  <BlogHeader title={BLOG_SITE_TITLE} description={BLOG_SITE_DESCRIPTION} />
  <main transition:animate={slide({ duration: '0.5s' })}>
    <article class="article">
      {heroImage && <img width={720} height={360} src={heroImage} alt="" />}
      <h1 class="title" transition:name={"blog-title-" + entry.slug}>{title}</h1>
      {
        pubDate && (
          <span class="pub-date" transition:name={"blog-pub-date-" + entry.slug}>
            <time>
              {new Date(pubDate).toLocaleDateString("ja-jp", {
                year: "numeric",
                month: "short",
                day: "numeric",
              })}
            </time>
            作成
          </span>
        )
      }
      {
        updatedDate && (
          <span class="updated-date">
            <time>
              {new Date(updatedDate).toLocaleDateString("ja-jp", {
                year: "numeric",
                month: "short",
                day: "numeric",
              })}
            </time>
            更新
          </span>
        )
      }
      <hr />
      <Content />
      <hr />
      <AstroLink href="/" class="back-link">
        &lt; 一覧に戻る
      </AstroLink>
    </article>
  </main>
  <Footer />
</Layout>

<style lang="scss" is:global>
  :root {
    background-color: var(--color-background);
    word-wrap: break-word;
    overflow-wrap: break-word;
    line-height: 1.6;
    color: var(--color-text);
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  strong,
  b,
  p {
    color: var(--color-text);
    margin: var(--spacing-sm) 0;
  }
  
  h1 {
    font-size: 2rem;
    margin-top: var(--spacing-lg);
    margin-bottom: var(--spacing-md);
  }
  
  h2 {
    font-size: 1.5rem;
    margin-top: var(--spacing-lg);
    padding-bottom: var(--spacing-xs);
    border-bottom: 2px solid var(--color-secondary);
  }
  
  h3 {
    font-size: 1.25rem;
    margin-top: var(--spacing-md);
  }
  
  textarea {
    width: 100%;
    font-size: 16px;
  }
  input {
    font-size: 16px;
  }
  content {
    line-height: 1.6;
  }
  table {
    width: 100%;
    border-collapse: collapse;
    margin: var(--spacing-md) 0;
  }
  th, td {
    padding: var(--spacing-sm);
    border: 1px solid var(--color-border);
  }
  img {
    max-width: 100%;
    height: auto;
    border-radius: var(--border-radius);
  }
  code {
    padding: 2px 5px;
    background-color: #f2f2f2;
    border-radius: 3px;
    font-family: monospace;
  }
  pre {
    padding: var(--spacing-md);
    border-radius: var(--border-radius);
    background-color: #f2f2f2;
    overflow-x: auto;
  }
  pre > code {
    all: unset;
    font-family: monospace;
  }
  blockquote {
    border-left: 4px solid var(--color-secondary);
    color: var(--color-text-light);
    padding: var(--spacing-xs) 0 var(--spacing-xs) var(--spacing-md);
    margin: var(--spacing-md) 0;
    font-style: italic;
    background-color: rgba(251, 191, 93, 0.05);
    border-radius: 0 var(--border-radius) var(--border-radius) 0;
  }

  .article {
    margin: var(--spacing-md) auto;
    max-width: 910px;
    padding: var(--spacing-lg);
    background-color: var(--color-card-background);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);

    .title {
      font-size: 28px;
      margin-bottom: var(--spacing-md);
    }

    .pub-date {
      font-size: 14px;
      color: var(--color-text-light);
    }

    .updated-date {
      font-size: 14px;
      color: var(--color-text-light);

      &::before {
        content: " / ";
        color: var(--color-text-light);
      }
    }

    hr {
      border: none;
      border-top: 1px solid var(--color-border);
      margin: var(--spacing-md) 0;
    }
    
    .back-link {
      display: inline-block;
      margin-top: var(--spacing-md);
      padding: var(--spacing-sm) var(--spacing-md);
      border-radius: var(--border-radius);
      background-color: #f5f5f5;
      transition: background-color 0.3s ease;
      
      &:hover {
        background-color: #e0e0e0;
      }
    }
  }
</style>
